"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/altar-session-service.ts":
/*!**************************************!*\
  !*** ./lib/altar-session-service.ts ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AltarSessionService: function() { return /* binding */ AltarSessionService; }\n/* harmony export */ });\n/* harmony import */ var _supabaseClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabaseClient */ \"(app-pages-browser)/./lib/supabaseClient.ts\");\n\nconst TABLE = \"altar_sessions\";\nconst AltarSessionService = {\n    async listRecent () {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5;\n        const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(TABLE).select(\"*\").order(\"session_date\", {\n            ascending: false\n        }).order(\"session_time\", {\n            ascending: false\n        }).limit(limit);\n        if (error) throw error;\n        return data;\n    },\n    async list (altarId) {\n        const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(TABLE).select(\"*\").eq(\"altar_id\", altarId).order(\"session_date\", {\n            ascending: false\n        }).order(\"session_time\", {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    },\n    async create (input) {\n        const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(TABLE).insert(input).select(\"*\").single();\n        if (error) throw error;\n        return data;\n    },\n    async update (id, input) {\n        const { data, error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(TABLE).update(input).eq(\"id\", id).select(\"*\").single();\n        if (error) throw error;\n        return data;\n    },\n    async delete (id) {\n        const { error } = await _supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from(TABLE).delete().eq(\"id\", id);\n        if (error) throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hbHRhci1zZXNzaW9uLXNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkM7QUFHM0MsTUFBTUMsUUFBUTtBQUVQLE1BQU1DLHNCQUFzQjtJQUNqQyxNQUFNQztZQUFXQyxRQUFBQSxpRUFBZ0I7UUFDL0IsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU1OLHFEQUFRQSxDQUNuQ08sSUFBSSxDQUFDTixPQUNMTyxNQUFNLENBQUMsS0FDUEMsS0FBSyxDQUFDLGdCQUFnQjtZQUFFQyxXQUFXO1FBQU0sR0FDekNELEtBQUssQ0FBQyxnQkFBZ0I7WUFBRUMsV0FBVztRQUFNLEdBQ3pDTixLQUFLLENBQUNBO1FBQ1QsSUFBSUUsT0FBTyxNQUFNQTtRQUNqQixPQUFPRDtJQUNUO0lBQ0EsTUFBTU0sTUFBS0MsT0FBZTtRQUN4QixNQUFNLEVBQUVQLElBQUksRUFBRUMsS0FBSyxFQUFFLEdBQUcsTUFBTU4scURBQVFBLENBQ25DTyxJQUFJLENBQUNOLE9BQ0xPLE1BQU0sQ0FBQyxLQUNQSyxFQUFFLENBQUMsWUFBWUQsU0FDZkgsS0FBSyxDQUFDLGdCQUFnQjtZQUFFQyxXQUFXO1FBQU0sR0FDekNELEtBQUssQ0FBQyxnQkFBZ0I7WUFBRUMsV0FBVztRQUFNO1FBQzVDLElBQUlKLE9BQU8sTUFBTUE7UUFDakIsT0FBT0Q7SUFDVDtJQUVBLE1BQU1TLFFBQU9DLEtBQThCO1FBQ3pDLE1BQU0sRUFBRVYsSUFBSSxFQUFFQyxLQUFLLEVBQUUsR0FBRyxNQUFNTixxREFBUUEsQ0FBQ08sSUFBSSxDQUFDTixPQUFPZSxNQUFNLENBQUNELE9BQU9QLE1BQU0sQ0FBQyxLQUFLUyxNQUFNO1FBQ25GLElBQUlYLE9BQU8sTUFBTUE7UUFDakIsT0FBT0Q7SUFDVDtJQUVBLE1BQU1hLFFBQU9DLEVBQVUsRUFBRUosS0FBOEI7UUFDckQsTUFBTSxFQUFFVixJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU1OLHFEQUFRQSxDQUFDTyxJQUFJLENBQUNOLE9BQU9pQixNQUFNLENBQUNILE9BQU9GLEVBQUUsQ0FBQyxNQUFNTSxJQUFJWCxNQUFNLENBQUMsS0FBS1MsTUFBTTtRQUNoRyxJQUFJWCxPQUFPLE1BQU1BO1FBQ2pCLE9BQU9EO0lBQ1Q7SUFFQSxNQUFNZSxRQUFPRCxFQUFVO1FBQ3JCLE1BQU0sRUFBRWIsS0FBSyxFQUFFLEdBQUcsTUFBTU4scURBQVFBLENBQUNPLElBQUksQ0FBQ04sT0FBT21CLE1BQU0sR0FBR1AsRUFBRSxDQUFDLE1BQU1NO1FBQy9ELElBQUliLE9BQU8sTUFBTUE7SUFDbkI7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2xpYi9hbHRhci1zZXNzaW9uLXNlcnZpY2UudHM/ODI0MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzdXBhYmFzZSB9IGZyb20gJy4vc3VwYWJhc2VDbGllbnQnXG5pbXBvcnQgeyBBbHRhclNlc3Npb24sIENyZWF0ZUFsdGFyU2Vzc2lvbklucHV0LCBVcGRhdGVBbHRhclNlc3Npb25JbnB1dCB9IGZyb20gJy4uL3R5cGVzL2FsdGFyLnR5cGVzJ1xuXG5jb25zdCBUQUJMRSA9ICdhbHRhcl9zZXNzaW9ucydcblxuZXhwb3J0IGNvbnN0IEFsdGFyU2Vzc2lvblNlcnZpY2UgPSB7XG4gIGFzeW5jIGxpc3RSZWNlbnQobGltaXQ6IG51bWJlciA9IDUpOiBQcm9taXNlPEFsdGFyU2Vzc2lvbltdPiB7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKFRBQkxFKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAub3JkZXIoJ3Nlc3Npb25fZGF0ZScsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgICAgLm9yZGVyKCdzZXNzaW9uX3RpbWUnLCB7IGFzY2VuZGluZzogZmFsc2UgfSlcbiAgICAgIC5saW1pdChsaW1pdClcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG4gICAgcmV0dXJuIGRhdGEgYXMgQWx0YXJTZXNzaW9uW11cbiAgfSxcbiAgYXN5bmMgbGlzdChhbHRhcklkOiBzdHJpbmcpOiBQcm9taXNlPEFsdGFyU2Vzc2lvbltdPiB7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKFRBQkxFKVxuICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAuZXEoJ2FsdGFyX2lkJywgYWx0YXJJZClcbiAgICAgIC5vcmRlcignc2Vzc2lvbl9kYXRlJywgeyBhc2NlbmRpbmc6IGZhbHNlIH0pXG4gICAgICAub3JkZXIoJ3Nlc3Npb25fdGltZScsIHsgYXNjZW5kaW5nOiBmYWxzZSB9KVxuICAgIGlmIChlcnJvcikgdGhyb3cgZXJyb3JcbiAgICByZXR1cm4gZGF0YSBhcyBBbHRhclNlc3Npb25bXVxuICB9LFxuXG4gIGFzeW5jIGNyZWF0ZShpbnB1dDogQ3JlYXRlQWx0YXJTZXNzaW9uSW5wdXQpOiBQcm9taXNlPEFsdGFyU2Vzc2lvbj4ge1xuICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oVEFCTEUpLmluc2VydChpbnB1dCkuc2VsZWN0KCcqJykuc2luZ2xlKClcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG4gICAgcmV0dXJuIGRhdGEgYXMgQWx0YXJTZXNzaW9uXG4gIH0sXG5cbiAgYXN5bmMgdXBkYXRlKGlkOiBzdHJpbmcsIGlucHV0OiBVcGRhdGVBbHRhclNlc3Npb25JbnB1dCk6IFByb21pc2U8QWx0YXJTZXNzaW9uPiB7XG4gICAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuZnJvbShUQUJMRSkudXBkYXRlKGlucHV0KS5lcSgnaWQnLCBpZCkuc2VsZWN0KCcqJykuc2luZ2xlKClcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG4gICAgcmV0dXJuIGRhdGEgYXMgQWx0YXJTZXNzaW9uXG4gIH0sXG5cbiAgYXN5bmMgZGVsZXRlKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5mcm9tKFRBQkxFKS5kZWxldGUoKS5lcSgnaWQnLCBpZClcbiAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJzdXBhYmFzZSIsIlRBQkxFIiwiQWx0YXJTZXNzaW9uU2VydmljZSIsImxpc3RSZWNlbnQiLCJsaW1pdCIsImRhdGEiLCJlcnJvciIsImZyb20iLCJzZWxlY3QiLCJvcmRlciIsImFzY2VuZGluZyIsImxpc3QiLCJhbHRhcklkIiwiZXEiLCJjcmVhdGUiLCJpbnB1dCIsImluc2VydCIsInNpbmdsZSIsInVwZGF0ZSIsImlkIiwiZGVsZXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/altar-session-service.ts\n"));

/***/ })

});